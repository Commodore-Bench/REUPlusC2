ca65 V2.18 - Git bf4b195
Main file   : i2cRtnsX.s
Current file: i2cRtnsX.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.18 - Git bf4b195
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.18 - Git bf4b195"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.export		_i2cSendStart
000000r 1               	.export		_i2cSendStop
000000r 1               	.export		_i2cSendByte
000000r 1               	.export		_i2cSendNBytes
000000r 1               	.export		_i2cGetByteAck
000000r 1               	.export		_i2cGetByteNack
000000r 1               	.export		_i2cGetNBytes
000000r 1               
000000r 1               ; export locally defined globals
000000r 1               ;	.export		_workByte
000000r 1               ;	.export		_errCode
000000r 1               
000000r 1               ; an external global
000000r 1               	.import		_rtcDat
000000r 1               
000000r 1               	.import		_g_rtcStartAdr
000000r 1               	.import		_g_rtcNrBytes
000000r 1               	.import		_g_rtcAryPtr
000000r 1               	.import		_g_rtcRegs	; [20]
000000r 1               
000000r 1               
000000r 1               
000000r 1               
000000r 1               ; place globals in this section
000000r 1               .segment	"BSS"
000000r 1               
000000r 1               ;_workByte:
000000r 1               ;	.res	1,$00
000000r 1               
000000r 1               
000000r 1               
000000r 1               I2C_DATWRREG	= $DF2C
000000r 1               I2C_DATRDREG	= $DF2B
000000r 1               I2C_CMDREG	= $DF2A
000000r 1               I2C_CMDNOP	= $00
000000r 1               I2C_CMDSTART	= $01
000000r 1               I2C_CMDSTOP	= $02
000000r 1               I2C_CMDSEND	= $03
000000r 1               I2C_CMDRXACK	= $04
000000r 1               I2C_CMDRXNACK	= $05
000000r 1               I2C_MASK_SFTRDY = $80
000000r 1               I2C_MASK_ACKBIT = $40
000000r 1               I2C_MASK_CMDBITS = $07
000000r 1               
000000r 1               
000000r 1               
000000r 1               ; ---------------------------------------------------------------
000000r 1               ; void __near__ i2cSendStart (void)
000000r 1               ; ---------------------------------------------------------------
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_i2cSendStart: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ; initiate the START command
000000r 1  A9 01        	lda	#I2C_CMDSTART
000002r 1  8D 2A DF     	sta	I2C_CMDREG
000005r 1               
000005r 1               ; the I2C FSM will reset the command to
000005r 1               ;	I2C_CMDNOP when it is done
000005r 1               L0001:
000005r 1  AD 2A DF     	lda	I2C_CMDREG
000008r 1  29 07        	and	#I2C_MASK_CMDBITS
00000Ar 1  C9 00        	cmp	#I2C_CMDNOP
00000Cr 1  D0 F7        	bne	L0001
00000Er 1  A2 00        	ldx	#$00
000010r 1  60           	rts
000011r 1               
000011r 1               .endproc
000011r 1               
000011r 1               
000011r 1               ; ---------------------------------------------------------------
000011r 1               ; void __near__ i2cSendStop (void)
000011r 1               ; ---------------------------------------------------------------
000011r 1               
000011r 1               .segment	"CODE"
000011r 1               
000011r 1               .proc	_i2cSendStop: near
000011r 1               
000011r 1               .segment	"CODE"
000011r 1               
000011r 1               ; initiate the STOP command
000011r 1  A9 02        	lda	#I2C_CMDSTOP
000013r 1  8D 2A DF     	sta	I2C_CMDREG
000016r 1               
000016r 1               ; the I2C FSM will reset the command to
000016r 1               ;	I2C_CMDNOP when it is done
000016r 1               L0002:
000016r 1               
000016r 1  AD 2A DF     	lda	I2C_CMDREG
000019r 1  29 07        	and	#I2C_MASK_CMDBITS
00001Br 1  D0 F9        	bne	L0002
00001Dr 1  A2 00        	ldx	#$00
00001Fr 1  60           	rts
000020r 1               
000020r 1               .endproc
000020r 1               
000020r 1               
000020r 1               ; ---------------------------------------------------------------
000020r 1               ; unsigned char __near__ i2cSendByte (unsigned char byte)
000020r 1               ; ---------------------------------------------------------------
000020r 1               
000020r 1               .segment	"CODE"
000020r 1               
000020r 1               .proc	_i2cSendByte: near
000020r 1               
000020r 1               .segment	"CODE"
000020r 1               
000020r 1  A2 03        	ldx	#I2C_CMDSEND
000022r 1  8E 2A DF     	stx	I2C_CMDREG
000025r 1  8D 2C DF     	sta	I2C_DATWRREG
000028r 1               
000028r 1               L0003:
000028r 1  AD 2A DF     	lda	I2C_CMDREG
00002Br 1  29 80        	and	#I2C_MASK_SFTRDY
00002Dr 1  F0 F9        	beq	L0003
00002Fr 1               
00002Fr 1  AD 2A DF     	lda	I2C_CMDREG
000032r 1  29 40        	and	#I2C_MASK_ACKBIT
000034r 1  A2 00        	ldx	#$00
000036r 1  60           	rts
000037r 1               
000037r 1               .endproc
000037r 1               
000037r 1               
000037r 1               
000037r 1               ; ---------------------------------------------------------------
000037r 1               ; unsigned char __near__ i2cSendNBytes (unsigned char nrBytes, unsigned int bufAdr)
000037r 1               ; ---------------------------------------------------------------
000037r 1               
000037r 1               .segment	"CODE"
000037r 1               
000037r 1               .proc	_i2cSendNBytes: near
000037r 1               
000037r 1               .segment	"CODE"
000037r 1               
000037r 1               ; save the passed address to a safe place
000037r 1               ; CC65 has these for our use
000037r 1               ;
000037r 1  85 rr        	sta	ptr1
000039r 1  86 rr        	stx	ptr1 + 1
00003Br 1               
00003Br 1               ; set up the I2C controller
00003Br 1  A9 03        	lda	#I2C_CMDSEND
00003Dr 1  8D 2A DF     	sta	I2C_CMDREG
000040r 1               
000040r 1               ; get the number of bytes to transfer
000040r 1  A0 00        	ldy     #$00
000042r 1  B1 rr        	lda	(sp), y
000044r 1  AA           	tax
000045r 1               
000045r 1               ; (ptr1), y will now point to the first
000045r 1               ; bytes to be transferred
000045r 1  A0 00                ldy	#$00
000047r 1               
000047r 1               L0004B:
000047r 1               ; get a data byte to send
000047r 1  B1 rr        	lda	(ptr1), y
000049r 1               ; send it
000049r 1  8D 2C DF     	sta	I2C_DATWRREG
00004Cr 1               
00004Cr 1               ; wait for the shifter to be ready
00004Cr 1               L0004:
00004Cr 1  AD 2A DF     	lda	I2C_CMDREG
00004Fr 1  29 80        	and	#I2C_MASK_SFTRDY
000051r 1  F0 F9        	beq	L0004
000053r 1               ; the byte has been sent, so check the acknowledge bit
000053r 1  AD 2A DF     	lda	I2C_CMDREG
000056r 1  29 40        	and	#I2C_MASK_ACKBIT
000058r 1               ; there was an ACK error
000058r 1  D0 06        	bne	L0004A
00005Ar 1               ; next byte
00005Ar 1  C8           	iny
00005Br 1               ; update the byte counter
00005Br 1  CA           	dex
00005Cr 1               ; back around for more bytes.
00005Cr 1  D0 E9        	bne	L0004B
00005Er 1               
00005Er 1  A9 00        	lda	#$00
000060r 1               L0004A:
000060r 1  A2 00        	ldx	#$00
000062r 1               
000062r 1  20 rr rr     	jsr     incsp1
000065r 1  60           	rts
000066r 1               .endproc
000066r 1               
000066r 1               
000066r 1               
000066r 1               
000066r 1               ; ---------------------------------------------------------------
000066r 1               ; unsigned char __near__ i2cGetByteAck (void)
000066r 1               ; ---------------------------------------------------------------
000066r 1               
000066r 1               .segment	"CODE"
000066r 1               
000066r 1               .proc	_i2cGetByteAck: near
000066r 1               
000066r 1               .segment	"CODE"
000066r 1               
000066r 1  A2 04        	ldx	#I2C_CMDRXACK
000068r 1  8E 2A DF     	stx	I2C_CMDREG
00006Br 1  AD 2B DF     	lda	I2C_DATRDREG
00006Er 1  AA           	tax
00006Fr 1               
00006Fr 1               L0005:
00006Fr 1  AD 2A DF     	lda	I2C_CMDREG
000072r 1  29 80        	and	#I2C_MASK_SFTRDY
000074r 1  F0 F9        	beq	L0005
000076r 1               
000076r 1  8A           	txa
000077r 1  A2 00        	ldx	#$00
000079r 1  60           	rts
00007Ar 1               
00007Ar 1               .endproc
00007Ar 1               
00007Ar 1               
00007Ar 1               ; ---------------------------------------------------------------
00007Ar 1               ; unsigned char __near__ i2cGetByteNack (void)
00007Ar 1               ; ---------------------------------------------------------------
00007Ar 1               
00007Ar 1               .segment	"CODE"
00007Ar 1               
00007Ar 1               .proc	_i2cGetByteNack: near
00007Ar 1               
00007Ar 1               .segment	"CODE"
00007Ar 1               
00007Ar 1  A2 05        	ldx	#I2C_CMDRXNACK
00007Cr 1  8E 2A DF     	stx	I2C_CMDREG
00007Fr 1  AD 2B DF     	lda	I2C_DATRDREG
000082r 1  AA           	tax
000083r 1               
000083r 1               L0005:
000083r 1  AD 2A DF     	lda	I2C_CMDREG
000086r 1  29 80        	and	#I2C_MASK_SFTRDY
000088r 1  F0 F9        	beq	L0005
00008Ar 1               
00008Ar 1  8A           	txa
00008Br 1  A2 00        	ldx	#$00
00008Dr 1  60           	rts
00008Er 1               
00008Er 1               .endproc
00008Er 1               
00008Er 1               
00008Er 1               ; ---------------------------------------------------------------
00008Er 1               ; unsigned char __near__ i2cGetNBytes (unsigned char nrBytes, unsigned int bufAdr)
00008Er 1               ; ---------------------------------------------------------------
00008Er 1               
00008Er 1               .segment	"CODE"
00008Er 1               
00008Er 1               .proc	_i2cGetNBytes: near
00008Er 1               
00008Er 1               .segment	"CODE"
00008Er 1               
00008Er 1               ; save the passed address to a safe place
00008Er 1               ; CC65 has these for our use
00008Er 1               ;
00008Er 1  85 rr        	sta	ptr1
000090r 1  86 rr        	stx	ptr1 + 1
000092r 1               
000092r 1               ; set up the I2C controller
000092r 1  A9 04        	lda	#I2C_CMDRXACK
000094r 1  8D 2A DF     	sta	I2C_CMDREG
000097r 1               
000097r 1               ; get the number of bytes to transfer
000097r 1  A0 00        	ldy     #$00
000099r 1  B1 rr        	lda	(sp), y
00009Br 1  AA           	tax
00009Cr 1               
00009Cr 1               ; do a dummy read. this shifts in the first
00009Cr 1               ; actual data byte from the I2C peripheral
00009Cr 1  AD 2B DF     	lda	I2C_DATRDREG
00009Fr 1               ;	ldy	#10
00009Fr 1               ;L0006A:
00009Fr 1               ;	dey
00009Fr 1               ;	bne	L0006A
00009Fr 1               
00009Fr 1               L0006A:
00009Fr 1  AD 2A DF     	lda	I2C_CMDREG
0000A2r 1  29 80        	and	#I2C_MASK_SFTRDY
0000A4r 1  F0 F9        	beq	L0006A
0000A6r 1               
0000A6r 1               
0000A6r 1               
0000A6r 1               ; (ptr1), y will now point to buffer location
0000A6r 1               ; where the read byte will be put
0000A6r 1  A0 00                ldy	#$00
0000A8r 1               
0000A8r 1               L0006B:
0000A8r 1               ; read the byte in the I2C FSM receive register
0000A8r 1               ; and get the next
0000A8r 1  AD 2B DF     	lda	I2C_DATRDREG
0000ABr 1  91 rr        	sta	(ptr1), y
0000ADr 1               
0000ADr 1               ; wait for the shifter to be ready
0000ADr 1               L0006:
0000ADr 1  AD 2A DF     	lda	I2C_CMDREG
0000B0r 1  29 80        	and	#I2C_MASK_SFTRDY
0000B2r 1  F0 F9        	beq	L0006
0000B4r 1               ; next byte
0000B4r 1  C8           	iny
0000B5r 1               ; update the byte counter
0000B5r 1  CA           	dex
0000B6r 1               ; back around for more bytes.
0000B6r 1  D0 F0        	bne	L0006B
0000B8r 1               
0000B8r 1               ; do a dummy read with a NACK to end the transaction
0000B8r 1  20 rr rr     	jsr	_i2cGetByteNack
0000BBr 1               
0000BBr 1               
0000BBr 1               exit:
0000BBr 1               
0000BBr 1  A9 00        	lda	#$00
0000BDr 1  A2 00        	ldx	#$00
0000BFr 1               
0000BFr 1  20 rr rr     	jsr     incsp1
0000C2r 1  60           	rts
0000C3r 1               
0000C3r 1               .endproc
0000C3r 1               
0000C3r 1               
0000C3r 1               
0000C3r 1               
